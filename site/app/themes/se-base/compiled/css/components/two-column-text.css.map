{"version":3,"sources":["components/two-column-text.scss","utils/_mixins.scss"],"names":[],"mappings":"AA2BK,qDC+FD,OAAA,IAAA,KAAA,MDvHJ,kBACI,SAAA,SACA,8BACI,MAAA,MACA,OAAA,KACA,SAAA,SACA,KAAA,IACA,OAAA,EAAA,EAAA,EAAA,MACA,IAAA,EAGJ,2BACI,QAAA,EAAA,KAGJ,0BACI,MAAA,kBACA,SAAA,SACA,KAAA,MACA,yBAJJ,0BAKQ,MAAA,KACA,KAAA,GAGR,qDACI,QAAA,KACA,WAAA","file":"two-column-text.css","sourcesContent":["@import '../utils/variables';\n@import '../utils/mixins';\n\n.two-column-block {\n    position: relative;\n    &__background {\n        width: 100vw;\n        height: 100%;\n        position: absolute;\n        left: 50%;\n        margin: 0 0 0 -50vw;\n        top: 0;\n    }\n    &__inner {}\n    &__content {\n        padding: 0 30px;\n    }\n    &__title {}\n    &--border {\n        width: calc(100% + 60px);\n        position: relative;\n        left: -30px;\n        @media(min-width: $breakpoint-md) {\n            width: 100%;\n            left: 0;\n        }\n    }\n    &--border &__content {\n        padding: 30px;\n        background: white;\n        @extend %border-style;\n    }\n}","/*\n * Media query to respond to a minimum size (mobile first)\n */\n\n@mixin resp-min($size) {\n    @media screen and (min-width: $size) {\n        @content;\n    }\n}\n\n\n/*\n * Media query to respond to a maximum size\n */\n\n@mixin resp-max($size) {\n    @media screen and (max-width: $size) {\n        @content;\n    }\n}\n\n\n/*\n * Output font size in px/rem\n */\n\n@mixin font-size($px) {\n    font-size: $px + px;\n    font-size: #{$px / 16}rem;\n}\n\n\n/*\n * Placeholder mixin for <input>\n */\n\n@mixin placeholder {\n    $placeholders: \":-webkit-input\" \":-moz\" \"-moz\" \"-ms-input\";\n    @each $placeholder in $placeholders {\n        &:#{$placeholder}-placeholder {\n            @content;\n        }\n    }\n}\n\n\n/**\n * Clearfix\n */\n\n@mixin clearfix {\n    &:before,\n    &:after {\n        content: \" \";\n        display: table;\n        flex-basis: 0;\n        width: 0;\n        height: 0;\n        order: 1;\n    }\n    &:after {\n        clear: both;\n    }\n}\n\n%clearfix {\n    &:before,\n    &:after {\n        content: \" \";\n        display: table;\n        flex-basis: 0;\n        width: 0;\n        height: 0;\n        order: 1;\n    }\n    &:after {\n        clear: both;\n    }\n}\n\n\n/**\n * Positioning\n */\n\n@mixin center($horizontal: true, $vertical: true) {\n    position: absolute;\n    @if $horizontal and $vertical {\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n    }\n    @else if $horizontal {\n        left: 50%;\n        transform: translateX(-50%);\n    }\n    @else if $vertical {\n        top: 50%;\n        transform: translateY(-50%);\n    }\n}\n\n@mixin font-size($sizeValue: $base-font-size) {\n    font-size: ($sizeValue) + px;\n    font-size: ($sizeValue / $base-font-size) + rem;\n}\n\n%section {\n    padding: ($sp-unit * 2) 0;\n}\n\n%container {\n    padding: 0 30px;\n    @media (min-width: $breakpoint-md) {\n        margin: 0 auto;\n        max-width: 1200px;\n        width: 90%;\n    }\n}\n\n%border-style {\n    // box-shadow: 0 8px 30px rgba(0, 0, 0, 0.25);\n    border: 1px $border-color solid;\n}\n\n\n\n\n\n\n\n\n\n/* = Responsive Layouts */\n$fix-mqs: false !default;\n// MIN\n@mixin respond-min($width) {\n    // If we're outputting for a fixed media query set...\n    @if $fix-mqs {\n        // ...and if we should apply these rules...\n        @if $fix-mqs >= $width {\n            // ...output the content the user gave us.\n            @content;\n        }\n    }\n    @else {\n        // Otherwise, output it using a regular media query\n        @media only screen and (min-width: $width) {\n            @content;\n        }\n    }\n}\n/* = GRID SYSTEM */\n// LAYOUT\n// Use: (Breakpoint, Top number in fraction, bottom number in fraction)\n@mixin layout($bp, $top:1, $bottom:1) {\n    @if $bp > 0 {\n        @include respond-min($bp) {\n            width: calc((#{$top} / #{$bottom}) * 100#{\"%\"} - #{$gutter});\n        }\n    } @else {\n        width: calc((#{$top} / #{$bottom}) * 100#{\"%\"} - #{$gutter});\n    }\n}\n// PUSH PULL\n// Use: (Breakpoint, Top number in fraction, bottom number in fraction)\n@mixin pushpull($bp, $top:1, $bottom:1, $direction:'push') {\n    @if $direction == 'push' {\n        $direction: 'left'; \n    } @else {\n        $direction: 'right';\n    }\n    @if $bp > 0 {\n        @include respond-min($bp) {\n            margin-#{$direction}: calc((#{$top} / #{$bottom}) * 100#{\"%\"} + #{$gutter / 2});\n        }\n    } @else {\n        margin-#{$direction}: calc((#{$top} / #{$bottom}) * 100#{\"%\"} + #{$gutter});\n    }\n}"]}